services:

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - my_network
    depends_on:
      - api_service_1
      - api_service_2
      - email_sanitizer_1
      - email_sanitizer_2
      - llm_talker_1
      - llm_talker_2

  api_service_1:
    build:
      context: ./api_service
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/userRequestsDB
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
      - REDIS_CACHE_HOST=redis_cache
      - REDIS_CACHE_PORT=6379
      - JWT_SECRET=your_jwt_secret_here
      - LLM_SERVICE_URL=http://llm:11434/api/generate
    networks:
      - my_network
    ports:
      - "3000:3000"
    depends_on:
      - redis_queue
      - redis_cache
      - mongo
      - llm

  api_service_2:
    build:
      context: ./api_service
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/userRequestsDB
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
      - REDIS_CACHE_HOST=redis_cache
      - REDIS_CACHE_PORT=6379
      - JWT_SECRET=your_jwt_secret_here
      - LLM_SERVICE_URL=http://llm:11434/api/generate
    networks:
      - my_network
    ports:
      - "3010:3000"
    depends_on:
      - redis_queue
      - redis_cache
      - mongo
      - llm

  email_sanitizer_1:
    build:
      context: ./email_sanitizer
      dockerfile: Dockerfile
    environment:
      - PORT=3001
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
    networks:
      - my_network
    ports:
      - "3001:3001"
    depends_on:
      - redis_queue

  email_sanitizer_2:
    build:
      context: ./email_sanitizer
      dockerfile: Dockerfile
    environment:
      - PORT=3001
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
    networks:
      - my_network
    ports:
      - "3011:3001"
    depends_on:
      - redis_queue

  llm_talker_1:
    build:
      context: ./llm_talker
      dockerfile: Dockerfile
    environment:
      - PORT=3002
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
      - LLM_SERVICE_URL=http://llm:11434/api/generate
    networks:
      - my_network
    ports:
      - "3002:3002"
    depends_on:
      - redis_queue
      - llm

  llm_talker_2:
    build:
      context: ./llm_talker
      dockerfile: Dockerfile
    environment:
      - PORT=3002
      - REDIS_QUEUE_HOST=redis_queue
      - REDIS_QUEUE_PORT=6379
      - LLM_SERVICE_URL=http://llm:11434/api/generate
    networks:
      - my_network
    ports:
      - "3012:3002"
    depends_on:
      - redis_queue
      - llm

  redis_queue:
    image: redis:7
    container_name: redis_queue
    networks:
      - my_network
    ports:
      - "6379:6379"
    volumes:
      - redis_queue_data:/data

  redis_cache:
    image: redis:7
    container_name: redis_cache
    networks:
      - my_network
    ports:
      - "6380:6379"
    volumes:
      - redis_cache_data:/data

  mongo:
    image: mongo:6
    container_name: mongo
    networks:
      - my_network
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  llm:
    image: ollama/ollama
    container_name: llm
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - my_network
  
volumes:
  redis_queue_data:
  redis_cache_data:
  mongo_data:
  ollama_data:

networks:
  my_network:
    driver: bridge
